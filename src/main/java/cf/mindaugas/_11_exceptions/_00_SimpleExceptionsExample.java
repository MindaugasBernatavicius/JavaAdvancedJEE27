package cf.mindaugas._11_exceptions;

// Exception is an object representing ane error
// - if unhandled - crash
// - handle them using try - catch - finally
// - try block contains code, that can potentially throw an exception. It is the normal logic of the application
// - catch is where we define what happens when an exception is encountered
// - finally block, contains code that is executed regardless if the exception happened or not (often is not even provided/written)
// - we can use exceptions for input validation inside methods - throw keyword
// - checked vs. unchecked - there are types of exceptions and there are difference syntax and semantic differences
//      ... syntax - with checked exceptions we either need to declare that the method can throw them or handle them
//      ... semantics - we used checked exceptions if we think that the exception will happen often and the calling method should consider handling it

import java.util.Arrays;

public class _00_SimpleExceptionsExample {
    // private static int divide(int i, int j){
    //     return i / j;
    // }

    private static double divide(int i, int j) throws Exception {
        if(j == 0) throw new Exception("Exception, the 2nd parameter cant be zero for division");
        return (double)i / j;
    }

    class Person {
        int age;

        public Person(int age) {
            this.age = age;
        }

        public void setAge(int age) throws Exception {
            if(age < 0)
                // throw new IllegalArgumentException("People can't have negative age"); // unchecked exception
                // throw new IOException("People can't have negative age");              // checked exception (one of many)
                throw new Exception("People can't have negative age");                   // checked exception (one of many)
                // System.out.println("People can't have negative age");
            this.age = age;
        }
    }

    public static void main(String[] args)  {
        // // Exception in thread "main" java.lang.ArithmeticException: / by zero
        // System.out.println(divide(1, 0));

        // ----------------------------------------

        try {
            System.out.println(divide(1, 0));
            System.out.println(divide(3, 2));
        } catch (Exception e) {
            System.out.println("Exception happend");
            System.out.println(e.getMessage());
            // System.out.println(e.getCause());
            System.out.println(Arrays.toString(e.getStackTrace()));
        } finally {
            System.out.println(">>>>");
        }

        // ----------------------------------------

        // // try-catch block generated by intellij
        // try {
        //     System.out.println(divide(1, 0));
        //     System.out.println(divide(3, 2));
        // } catch (Exception e) {
        //     throw new RuntimeException(e);
        // }

        // Exception in thread "main" java.lang.RuntimeException: java.lang.Exception: Exception, the 2nd parameter cant be zero for division
        //      at cf.mindaugas._11_exceptions.App.main(App.java:39) <--- MOST IMPORTANT LINE
        //      at cf.mindaugas._11_exceptions.App.main(App.java:39) (this line did not appear in the original output)
        //      at cf.mindaugas._11_exceptions.App.main(App.java:39) (this line did not appear in the original output)
        // Caused by: java.lang.Exception: Exception, the 2nd parameter cant be zero for division
        //      at cf.mindaugas._11_exceptions.App.divide(App.java:17) <--- MOST IMPORTANT LINE
        //      at cf.mindaugas._11_exceptions.App.main(App.java:36)
    }
}
